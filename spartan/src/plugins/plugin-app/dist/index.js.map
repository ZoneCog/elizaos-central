{"version":3,"sources":["../src/actions/act_reg_start.ts","../../../node_modules/uuid/dist/esm/stringify.js","../../../node_modules/uuid/dist/esm/rng.js","../../../node_modules/uuid/dist/esm/native.js","../../../node_modules/uuid/dist/esm/v4.js","../src/utils.ts","../src/constants.ts","../src/actions/act_reg_query.ts","../src/actions/act_reg_confirmemail.ts","../src/actions/act_reg_delete.ts","../src/actions/act_menu.ts","../src/actions/act_wallet_create.ts","../src/actions/act_wallet_setstrategy.ts","../src/actions/act_wallet_list.ts","../src/actions/devfix.ts","../src/index.ts"],"sourcesContent":["import {\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport nodemailer from 'nodemailer';\nimport { takeItPrivate } from '../utils'\nimport { EMAIL_TYPE, SPARTAN_SERVICE_TYPE } from '../constants'\n\n// Create an SMTP transporter\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST,      // e.g. smtp.gmail.com, smtp.mailgun.org\n  port: parseInt(process.env.SMTP_PORT) || 587,                     // 587 for TLS, 465 for SSL\n  secure: false,                 // true for port 465, false for 587\n  auth: {\n    user: process.env.SMTP_USERNAME,       // your SMTP username\n    pass: process.env.SMTP_PASSWORD        // your SMTP password or app password\n  }\n});\n\nfunction generateRandomString(length) {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  const charsLength = chars.length;\n\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * charsLength));\n  }\n\n  return result;\n}\n\nfunction extractEmails(text) {\n  const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n  const matches = text.match(emailRegex);\n  return matches || [];\n}\n\nasync function sendVerifyEmail(address, regCode) {\n  console.log('sending verify email to', address)\n  const mailOptions = {\n    from: process.env.SMTP_FROM,\n    to: address,\n    subject: 'Welcome to Spartan Services',\n    //text: 'Please click the following link to verify you are the owner of this email and continue registration'\n    text: 'Please give Spartan the following code: ' + regCode\n  };\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log('Email sent:', info.envelope);\n  } catch (error) {\n    console.error('Error sending email:', error);\n  }\n}\n\n// handle no EMAIL_TYPE to EMAIL_TYPE transition\nexport const userRegistration: Action = {\n  name: 'USER_REGISTRATION',\n  similes: [\n  ],\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    //console.log('USER_REGISTRATION validate')\n/*\nsve:validate message {\n  id: \"1e574bcc-7d3d-04de-bb2e-a58ec153832f\",\n  entityId: \"36ab9481-0939-0d2e-be06-f2ba5bf3a917\",\n  agentId: \"479233fd-b0e7-0f50-9d88-d4c9ea5b0de0\",\n  roomId: \"c8936fc3-f950-0a59-8b19-a2bd342c0cb8\",\n  content: {\n    text: \"x@y.cc\",\n    attachments: [],\n    source: \"discord\",\n    url: \"https://discord.com/channels/@me/1366955975667482685/1372702486644916354\",\n    inReplyTo: undefined,\n  },\n  metadata: {\n    entityName: \"Odilitime\",\n    authorId: \"580487826420793364\",\n  },\n  createdAt: 1747348176395,\n  embedding: [],\n  callback: [AsyncFunction: callback],\n  onComplete: undefined,\n}\n*/\n    //console.log('sve:validate message', message)\n\n    // if not a discord/telegram message, we can ignore it\n    if (!message.metadata.authorId) return false\n\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    //console.log('reg:validate entity', entity)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    console.log('reg_start:validate - are signed up?', !!email)\n    return !email\n  },\n  description: 'Allows a user to start user registration',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback,\n    responses: any[]\n  ): Promise<boolean> => {\n    console.log('USER_REGISTRATION handler')\n    //console.log('message', message)\n\n    // ok we need to change a state on this author\n\n    // get room and it's components?\n    const roomDetails = await runtime.getRoom(message.roomId);\n    // doesn't have components\n    console.log('roomDetails', roomDetails)\n    const roomEntity = await runtime.getEntityById(message.roomId)\n    console.log('roomEntity', roomEntity)\n\n    const agentEntityId = createUniqueUuid(runtime, runtime.agentId);\n    const agentEntity = await runtime.getEntityById(agentEntityId);\n    console.log('agentEntity', agentEntity)\n    let spartanData = agentEntity.components.find(c => c.type === SPARTAN_SERVICE_TYPE)\n    let spartanDataNew = false\n    let spartanDataDelta = false\n    if (!spartanData) {\n      // initialize\n      spartanDataNew = true\n      spartanData.data = {\n        users: [],\n      }\n    }\n\n\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    console.log('entity', entity)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    console.log('email', email)\n\n    const emails = extractEmails(message.content.text)\n\n    console.log('would have responded', responses)\n    console.log('emails in message', emails.length)\n    if (emails.length > 1) {\n      if (email) {\n        // any overlap?\n        console.log('Write overlap')\n      } else {\n        takeItPrivate(runtime, message, 'What email address would you like to use for registration')\n        responses.length = 0 // just clear them all\n      }\n    } else\n    if (emails.length === 1) {\n      const isLinking = spartanData.users.includes(email[0])\n\n      if (isLinking) {\n        console.log('this email is already used else where', isLinking)\n      } else {\n        const regCode = generateRandomString(16)\n        console.log('sending', regCode, 'to email', emails[0])\n        // set this entities email\n        await runtime.createComponent({\n          id: uuidv4() as UUID,\n          agentId: runtime.agentId,\n          worldId: roomDetails.worldId,\n          roomId: message.roomId,\n          sourceEntityId: message.entityId,\n          entityId: entityId,\n          type: EMAIL_TYPE,\n          data: {\n            address: emails[0],\n            code: regCode,\n            verified: false,\n          },\n        });\n        spartanDataDelta = true\n        spartanData.data.users.push(entityId)\n        await sendVerifyEmail(emails[0], regCode)\n        takeItPrivate(runtime, message, 'I just sent you an email (might need to check your spam folder) to confirm ' + emails[0])\n        responses.length = 0 // just clear them all\n      }\n      // update spartanData\n      async function updateSpartanData(agentEntityId, spartanData) {\n        if (spartanDataNew) {\n          await runtime.createComponent({\n            id: uuidv4() as UUID,\n            agentId: runtime.agentId,\n            worldId: roomDetails.worldId,\n            roomId: message.roomId,\n            sourceEntityId: entityId,\n            entityId: agentEntityId,\n            type: SPARTAN_SERVICE_TYPE,\n            data: spartanData.data,\n          });\n        } else {\n          await runtime.updateComponent({\n            id: spartanData.id,\n            // do we need all these fields?\n            //agentId: runtime.agentId,\n            //worldId: roomDetails.worldId,\n            //roomId: message.roomId,\n            //sourceEntityId: entityId,\n            //entityId: entityId,\n            //type: SPARTAN_SERVICE_TYPE,\n            data: spartanData.data,\n          });\n        }\n      }\n      // if we need to update it\n      if (spartanDataDelta) {\n        updateSpartanData(agentEntityId, spartanData)\n      }\n    } else {\n      // no email provided\n\n      // we can make a component for the state of this form\n\n      // do we have an email component already\n      if (email) {\n        // if so we should confirm\n\n        // set wizard state\n        // set form state\n        // yes/no\n        takeItPrivate(runtime, message, 'Do you want to use ' + email + ' for registration?')\n        responses.length = 0 // just clear them all\n      } else {\n        // set form state\n/*\n        await runtime.adapter.updateEntity({\n          id: entityId,\n          names: [...new Set([...(entity.names || []), ...names])].filter(Boolean),\n          metadata: {\n            ...entity.metadata,\n            [source]: {\n              ...entity.metadata?.[source],\n              name: name,\n              userName: userName,\n            },\n          },\n          agentId: this.agentId,\n        });\n*/\n        takeItPrivate(runtime, message, 'What email address would you like to use for registration')\n        responses.length = 0 // just clear them all\n      }\n    }\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to sign up for Spartan services',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll help you sign up\",\n          actions: ['USER_REGISTRATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to register',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"What email u wanna use\",\n          actions: ['USER_REGISTRATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I\\'d like to sign up',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"based. what email u want me to use\",\n          actions: ['USER_REGISTRATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I\\'m thinking about signing up with openai',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          actions: ['IGNORE'],\n        },\n      },\n    ], [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'email@email.com',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll help verify your email\",\n          actions: ['USER_REGISTRATION'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n","import { randomUUID } from 'crypto';\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random || (options.rng || rng)();\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import {\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\n\nexport async function messageReply(runtime, message, reply, responses) {\n  const roomDetails = await runtime.getRoom(message.roomId);\n  if (message.content.source === 'discord') {\n    // ServiceType.DISCORD\n    const discordService = runtime.getService('discord')\n    if (!discordService) {\n      logger.warn('no discord Service')\n      return\n    }\n    const isDM = roomDetails.type === 'dm'\n    if (isDM) {\n      discordService.sendDM(message.metadata.authorId, reply)\n      responses.length = 0\n    } else {\n      responses.length = 0\n      const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n      responses.push({\n        entityId,\n        agentId: runtime.agentId,\n        roomId: message.roomId,\n        content: {\n          text: reply,\n          attachments: [],\n          inReplyTo: createUniqueUuid(runtime, message.id)\n        },\n        // embedding\n        // metadata: entityName, type, authorId\n      })\n    }\n    return true\n  }\n  logger.warn('unknown platform', message.content.source)\n  return false\n}\n\nexport function takeItPrivate(runtime, message, reply) {\n  if (message.content.source === 'discord') {\n    // ServiceType.DISCORD\n    const discordService = runtime.getService('discord')\n    if (!discordService) {\n      logger.warn('no discord Service')\n      return\n    }\n    discordService.sendDM(message.metadata.authorId, reply)\n    return true\n  }\n  logger.warn('unknown platform', message.content.source)\n  return false\n}\n","\nexport const EMAIL_TYPE = 'trader_email_v0'\nexport const SPARTAN_SERVICE_TYPE = 'spartan_services'","import {\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type ActionExample,\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\nimport { takeItPrivate } from '../utils'\nimport { EMAIL_TYPE } from '../constants'\n\nexport const checkRegistration: Action = {\n  name: 'CHECK_REGISTRATION',\n  similes: [\n  ],\n  // can only enter this if we don't have an email\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    //console.log('CHECK_REGISTRATION validate')\n    return true\n  },\n  description: 'Allows a user to see if they are registered',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback,\n    responses: any[]\n  ): Promise<boolean> => {\n    console.log('CHECK_REGISTRATION handler')\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    //console.log('sve:validate entity', entity)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    console.log('CHECK_REGISTRATION', email, email?.data.verified)\n    if (email) {\n      // what stage we in?\n      if (email.data.verified) {\n        takeItPrivate(runtime, message, 'You are signed up under ' + email.data.address)\n      } else {\n        takeItPrivate(runtime, message, 'You are signed up under ' + email.data.address + ', waiting to be verified')\n      }\n    } else {\n      takeItPrivate(runtime, message, 'You are not signed up')\n    }\n    responses.length = 0 // just clear them all\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'am I signed up?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll check for you\",\n          actions: ['CHECK_REGISTRATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'am I registered?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll check for you\",\n          actions: ['CHECK_REGISTRATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'am I signed up for openai?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'what is bob signed up under?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}","import {\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type ActionExample,\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\nimport { takeItPrivate } from '../utils'\nimport { EMAIL_TYPE } from '../constants'\n\nfunction findGeneratedCode(message, length) {\n  const pattern = new RegExp(`\\\\b[A-Za-z0-9]{${length}}\\\\b`);\n  const match = message.match(pattern);\n  return match ? match[0] : null;\n}\n\nexport const checkRegistrationCode: Action = {\n  name: 'VERIFY_REGISTRATION_CODE',\n  similes: [\n  ],\n  // can only enter this if we don't have an email\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    //console.log('VERIFY_REGISTRATION_CODE validate')\n\n    // if not a discord/telegram message, we can ignore it\n    if (!message.metadata.authorId) return false\n\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    const containsGeneratedCode = findGeneratedCode(message.content.text, 16)\n    if (containsGeneratedCode !== null) {\n      runtime.runtimeLogger.log('VERIFY_REGISTRATION_CODE containsGeneratedCode', typeof(containsGeneratedCode), containsGeneratedCode)\n    }\n    return email && containsGeneratedCode !== null && !email.data?.verified // can only check what's set and not verified\n  },\n  description: 'Allows a user set their email address',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback,\n    responses: any[]\n  ): Promise<boolean> => {\n    console.log('VERIFY_REGISTRATION_CODE handler')\n\n    // get room and it's components?\n    const roomDetails = await runtime.getRoom(message.roomId);\n\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    console.log('VERIFY_REGISTRATION_CODE entity', entity)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    if (!email) {\n      console.log('shouldnt be here')\n      return\n    }\n    const passedCode = findGeneratedCode(message.content.text, 16)\n    if (passedCode === null) {\n      console.log('shouldnt be here')\n      return\n    }\n    console.log('VERIFY_REGISTRATION_CODE email', email, 'code', passedCode)\n    if (email.data.tries === undefined) email.data.tries = 0\n    if (email.data.tries > 3) {\n      console.log('hacker...')\n      takeItPrivate(runtime, message, 'You can no longer validate, you must delete your registration and restart')\n      responses.length = 0 // just clear them all\n      return\n    }\n    if (passedCode === email.data.code) {\n      // verify account\n      email.data.verified = true\n      takeItPrivate(runtime, message, 'Looks good, you are now registered and have access to my services')\n    } else {\n      // fail\n      // increase tries\n      email.data.tries++\n      takeItPrivate(runtime, message, 'That does not match my records, please double check, it is case sensitive')\n    }\n    responses.length = 0 // just clear them all\n    await runtime.updateComponent({\n      id: email.id,\n      worldId: roomDetails.worldId,\n      roomId: message.roomId,\n      sourceEntityId: message.entityId,\n      entityId: entityId,\n      type: EMAIL_TYPE,\n      data: email.data,\n      agentId: runtime.agentId,\n    });\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'This is my code you sent CODE',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll check it to see if it's correct\",\n          actions: ['VERIFY_REGISTRATION_CODE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'This is the code openai sent CODE',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          actions: ['IGNORE'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'what was the code you emailed me?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'I\\'m not going to tell you',\n        },\n      },\n    ],\n\n  ] as ActionExample[][],\n}","import {\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\nimport { takeItPrivate } from '../utils'\nimport { EMAIL_TYPE } from '../constants'\n\nexport const deleteRegistration: Action = {\n  name: 'DELETE_REGISTRATION',\n  similes: [\n  ],\n  // can only enter this if we don't have an email\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    //console.log('DELETE_REGISTRATION validate')\n\n    // if not a discord/telegram message, we can ignore it\n    if (!message.metadata.authorId) return false\n\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    return email // can only clear what's set\n  },\n  description: 'Allows a user to delete their account with Spartan services',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback,\n    responses: any[]\n  ): Promise<boolean> => {\n    console.log('DELETE_REGISTRATION handler')\n    //console.log('message', message)\n\n    const roomDetails = await runtime.getRoom(message.roomId);\n    // author entity for this runtime\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n\n    const entity = await runtime.getEntityById(entityId)\n    console.log('entity', entity)\n    const existingComponent = entity.components.find(c => c.type === EMAIL_TYPE)\n    /*\n    const existingComponent = await runtime.getComponent(\n      entityId,\n      EMAIL_TYPE,\n      roomDetails.worldId,\n      message.entityId\n    );\n    console.log('existingComponent', existingComponent)\n    */\n\n    if (existingComponent) {\n      console.log('deleting', existingComponent)\n      takeItPrivate(runtime, message, 'Just cleared your registration: ' + existingComponent.data.address)\n      runtime.deleteComponent(existingComponent.id)\n    } else {\n      takeItPrivate(runtime, message, 'Cant find your registration')\n    }\n    responses.length = 0 // just clear them all\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Please delete my registration',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll help you delete your registration\",\n          actions: ['DELETE_REGISTRATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I can I delete my registration',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Yes that's available\",\n          thought: \"User is curious but we want confirmed before we act\",\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Please delete my email on openai',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          actions: ['IGNORE'],\n        },\n      },\n    ], [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Please delete my signup on user@email.com',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll help you delete your registration\",\n          actions: ['DELETE_REGISTRATION'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}","import {\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport { messageReply } from '../utils'\nimport { EMAIL_TYPE } from '../constants'\n\nconst menutext = 'Heres what you can do'\n\nexport const servicesMenu: Action = {\n  name: 'SERVICES_MENU',\n  similes: [\n  ],\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    //console.log('SERVICES_MENU validate')\n    return true\n  },\n  description: 'Explains/sells Spartan services',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback,\n    responses: any[]\n  ): Promise<boolean> => {\n    console.log('SERVICES_MENU handler')\n\n    // is this in a DM or room?\n    //console.log('message', message)\n/*\n  id: \"f957ad11-946b-067d-ae2c-76be96a0fe0b\",\n  entityId: \"36ab9481-0939-0d2e-be06-f2ba5bf3a917\",\n  agentId: \"479233fd-b0e7-0f50-9d88-d4c9ea5b0de0\",\n  roomId: \"c8936fc3-f950-0a59-8b19-a2bd342c0cb8\",\n  content: {\n    text: \"so what I can I do?\",\n    attachments: [],\n    source: \"discord\",\n    url: \"https://discord.com/channels/@me/1366955975667482685/1374489835565224136\",\n    inReplyTo: undefined,\n  },\n  metadata: {\n    entityName: \"Odilitime\",\n    type: \"message\",\n    authorId: \"580487826420793364\",\n  },\n\n*/\n\n    // get room and it's components?\n    //const roomDetails = await runtime.getRoom(message.roomId);\n    // doesn't have components\n    //console.log('roomDetails', roomDetails)\n\n    //const isGroup = roomDetails.type === 'group'\n    //const isDM = roomDetails.type === 'dm'\n\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    //console.log('SERVICES_MENU entity', entity)\n    const signedup = entity.components.find(c => c.type === EMAIL_TYPE)\n\n    await messageReply(runtime, message, 'You can ask me to create a wallet for autonomous trading', responses)\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'What are Spartan services',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: menutext,\n          actions: ['SERVICES_MENU'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'What can I do?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: menutext,\n          actions: ['SERVICES_MENU'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'menu',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: menutext,\n          actions: ['SERVICES_MENU'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'What can I do with openai?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"IDK, ask them\"\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}","import {\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport { takeItPrivate, messageReply } from '../utils'\nimport { EMAIL_TYPE } from '../constants'\n\n// handle starting new form and collecting first field\nexport const walletCreate: Action = {\n  name: 'WALLET_CREATION',\n  similes: [\n  ],\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    //console.log('WALLET_CREATION validate')\n/*\nsve:validate message {\n  id: \"1e574bcc-7d3d-04de-bb2e-a58ec153832f\",\n  entityId: \"36ab9481-0939-0d2e-be06-f2ba5bf3a917\",\n  agentId: \"479233fd-b0e7-0f50-9d88-d4c9ea5b0de0\",\n  roomId: \"c8936fc3-f950-0a59-8b19-a2bd342c0cb8\",\n  content: {\n    text: \"x@y.cc\",\n    attachments: [],\n    source: \"discord\",\n    url: \"https://discord.com/channels/@me/1366955975667482685/1372702486644916354\",\n    inReplyTo: undefined,\n  },\n  metadata: {\n    entityName: \"Odilitime\",\n    authorId: \"580487826420793364\",\n  },\n  createdAt: 1747348176395,\n  embedding: [],\n  callback: [AsyncFunction: callback],\n  onComplete: undefined,\n}\n*/\n    //console.log('sve:validate message', message)\n\n    /*\n    // if not a discord/telegram message, we can ignore it\n    if (!message.metadata.authorId) return false\n\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    //console.log('reg:validate entity', entity)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    console.log('wallet_create:validate - are signed up?', !!email)\n    return !!email\n    */\n    const traderChainService = runtime.getService('TRADER_STRATEGY') as any;\n    return traderChainService\n  },\n  description: 'Allows a user to create a wallet',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback,\n    responses: any[]\n  ): Promise<boolean> => {\n    console.log('WALLET_CREATION handler')\n    //console.log('message', message)\n\n    // ok we need to change a state on this author\n\n    // get room and it's components?\n    //const roomDetails = await runtime.getRoom(message.roomId);\n    // doesn't have components\n    //console.log('roomDetails', roomDetails)\n    //const roomEntity = await runtime.getEntityById(message.roomId)\n    //console.log('roomEntity', roomEntity)\n\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    //console.log('entity', entity)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    //console.log('email', email)\n\n    if (!email) {\n      runtime.runtimeLogger.log('Not registered')\n      //takeItPrivate(runtime, message, 'You need to sign up for my services first')\n      messageReply(runtime, message, 'You need to sign up for my services first', responses)\n      responses.length = 0 // just clear them all\n      return\n    }\n\n    const traderChainService = runtime.getService('TRADER_STRATEGY') as any;\n    const stratgiesList = await traderChainService.listActiveStrategies()\n    console.log('stratgiesList', stratgiesList)\n    takeItPrivate(runtime, message, 'Hrm youve already signed up, here are the available strategies: \\n-' + stratgiesList.join('\\n-') + '\\n')\n    responses.length = 0 // just clear them all\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to create a wallet for autonomous trading',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll help you get started\",\n          actions: ['WALLET_CREATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to autotrade',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"What strategy u wanna use\",\n          actions: ['WALLET_CREATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I\\'d like to trade',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"based. what strategy u want me to use\",\n          actions: ['WALLET_CREATION'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to trade with a friend',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          actions: ['IGNORE'],\n        },\n      },\n    ], [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'generate a wallet',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll help generate one, what trading strategy do you want to use?\",\n          actions: ['WALLET_CREATION'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}","import {\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport { takeItPrivate, messageReply } from '../utils'\nimport { EMAIL_TYPE } from '../constants'\n\n// handle starting new form and collecting first field\nexport const setStrategy: Action = {\n  name: 'WALLET_SETSTRAT',\n  similes: [\n  ],\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    console.log('WALLET_SETSTRAT validate', message?.metadata?.authorId)\n    if (!message?.metadata?.authorId) {\n      console.log('WALLET_SETSTRAT validate - author not found')\n      return false\n    }\n\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    if (entityId === null) return false;\n    const entity = await runtime.getEntityById(entityId)\n    //console.log('entity', entity)\n    const reg = !!entity.components.find(c => c.type === EMAIL_TYPE)\n    if (!reg) return false;\n\n    const traderChainService = runtime.getService('TRADER_CHAIN') as any;\n    if (!traderChainService) return false\n    const traderStrategyService = runtime.getService('TRADER_STRATEGY') as any;\n    if (!traderStrategyService) return false\n    const stratgiesList = await traderStrategyService.listActiveStrategies()\n    // maybe sub words?\n    const containsStrat = stratgiesList.some(word => message.content.text.includes(word))\n    console.log('containsStrat', containsStrat, message.content.text)\n    return containsStrat\n  },\n  description: 'Allows a user to create a wallet with a strategy',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback,\n    responses: any[]\n  ): Promise<boolean> => {\n    console.log('WALLET_SETSTRAT handler')\n\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    //console.log('entity', entity)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    //console.log('email', email)\n\n    // should never hit it\n    if (!email) {\n      runtime.runtimeLogger.log('Not registered')\n      return\n    }\n    const roomDetails = await runtime.getRoom(message.roomId);\n\n    const traderStrategyService = runtime.getService('TRADER_STRATEGY') as any;\n    const stratgiesList = await traderStrategyService.listActiveStrategies()\n    // maybe we use an LLM call to get their exact meaning\n    const containsStrats = stratgiesList.filter(word => message.content.text.includes(word))\n    console.log('containsStrats', containsStrats)\n    //takeItPrivate(runtime, message, 'Hrm you\\'ve selected a strategy, time to make a wallet')\n\n    // should we check to see if we already a wallet with this strategy? no\n    // they can have multiple\n\n\n    // create meta wallet container on this registration\n\n    // which chains\n    const traderChainService = runtime.getService('TRADER_CHAIN') as any;\n    const chains = await traderChainService.listActiveChains()\n    console.log('chains', chains)\n\n    const newData = email.data\n    if (newData.metawallets === undefined) newData.metawallets = []\n    const newWallet = {\n      strategy: containsStrats[0],\n    }\n    const keypairs = {}\n    for(const c of chains) {\n      console.log('chain', c)\n      const kp = await traderChainService.makeKeypair(c)\n      console.log('kp', kp)\n      keypairs[c] = kp\n    }\n    newWallet.keypairs = keypairs\n    console.log('newWallet', newWallet)\n    takeItPrivate(runtime, message, 'Made a meta-wallet ' + JSON.stringify(newWallet) + ' please fund it to start trading')\n\n    newData.metawallets.push(newWallet)\n    // dev mode\n    newData.metawallets = [newWallet]\n\n    await runtime.updateComponent({\n      id: email.id,\n      worldId: roomDetails.worldId,\n      roomId: message.roomId,\n      sourceEntityId: message.entityId,\n      entityId: entityId,\n      type: EMAIL_TYPE,\n      data: newData,\n      agentId: runtime.agentId,\n    });\n\n\n    responses.length = 0 // just clear them all\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to create a wallet for autonomous trading using X trading strategy',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll help you get started\",\n          actions: ['WALLET_SETSTRAT'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to autotrade with X trading strategy',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Based\",\n          actions: ['WALLET_SETSTRAT'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I\\'d like to trade via X trading strategy',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Based\",\n          actions: ['WALLET_SETSTRAT'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want to trade with a friend',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          actions: ['IGNORE'],\n        },\n      },\n    ], [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'generate a wallet using X trading strategy',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll help generate one\",\n          actions: ['WALLET_SETSTRAT'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}","import {\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport { takeItPrivate, messageReply } from '../utils'\nimport { EMAIL_TYPE } from '../constants'\n\n// handle starting new form and collecting first field\nexport const userMetawalletList: Action = {\n  name: 'USER_METAWALLET_LIST',\n  similes: [\n  ],\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    console.log('USER_METAWALLET_LIST validate', message?.metadata?.authorId)\n    if (!message?.metadata?.authorId) {\n      console.log('USER_METAWALLET_LIST validate - author not found')\n      return false\n    }\n\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    if (entityId === null) return false;\n    const entity = await runtime.getEntityById(entityId)\n    //console.log('entity', entity)\n    const reg = !!entity.components.find(c => c.type === EMAIL_TYPE)\n    if (!reg) return false;\n\n    const traderChainService = runtime.getService('TRADER_CHAIN') as any;\n    if (!traderChainService) return false\n    const traderStrategyService = runtime.getService('TRADER_STRATEGY') as any;\n    if (!traderStrategyService) return false\n    return true\n  },\n  description: 'Allows a user to list all wallets they have',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback,\n    responses: any[]\n  ): Promise<boolean> => {\n    console.log('USER_METAWALLET_LIST handler')\n\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    const entity = await runtime.getEntityById(entityId)\n    //console.log('entity', entity)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    //console.log('email', email)\n\n    // should never hit it\n    if (!email) {\n      runtime.runtimeLogger.log('Not registered')\n      return\n    }\n    const roomDetails = await runtime.getRoom(message.roomId);\n\n    const traderStrategyService = runtime.getService('TRADER_STRATEGY') as any;\n    const stratgiesList = await traderStrategyService.listActiveStrategies()\n    // maybe we use an LLM call to get their exact meaning\n    const containsStrats = stratgiesList.filter(word => message.content.text.includes(word))\n    console.log('containsStrats', containsStrats)\n    //takeItPrivate(runtime, message, 'Hrm you\\'ve selected a strategy, time to make a wallet')\n\n    // should we check to see if we already a wallet with this strategy? no\n    // they can have multiple\n\n\n    // create meta wallet container on this registration\n\n    // which chains\n    const traderChainService = runtime.getService('TRADER_CHAIN') as any;\n    const chains = await traderChainService.listActiveChains()\n    console.log('chains', chains)\n    /*\n    [{\"keypairs\":{\"Solana\":{\"publicKey\":\"CPNHuuGHpskEp4Fmr8cg9x6ZyEMokYvJTaBST5gywqA2\",\"privateKey\":\"4vcbDoRNsRjmLSJEQjYFBi2ooG5EAY61t8K39vkNBoHaFSvcRmXB9imHx3azhMLxcPcPw67SCdEZYhKiAQDa1Y9Y\"}},\"strategy\":\"LLM trading strategy\"}]\n    */\n    takeItPrivate(runtime, message, 'List wallets: ' + JSON.stringify(email.data.metawallets))\n    responses.length = 0 // just clear them all\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'What wallets do I have',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Here\",\n          actions: ['USER_METAWALLET_LIST'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'list wallets',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"Here\",\n          actions: ['USER_METAWALLET_LIST'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I want list all my wallets for you',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'What?',\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}","import {\n  createUniqueUuid,\n  logger,\n} from '@elizaos/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport { takeItPrivate } from '../utils'\nimport { EMAIL_TYPE, SPARTAN_SERVICE_TYPE } from '../constants'\n\n// hack for data to fix data issues\nexport const devFix: Action = {\n  name: 'DEV_FIX',\n  similes: [\n  ],\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    return true\n  },\n  description: 'Allows developer to fix their shit',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback,\n    responses: any[]\n  ): Promise<boolean> => {\n    console.log('DEV_FIX handler')\n    //console.log('message', message)\n\n    // ok we need to change a state on this author\n\n    // get room and it's components?\n    const roomDetails = await runtime.getRoom(message.roomId);\n    // doesn't have components\n    //console.log('roomDetails', roomDetails)\n    const roomEntity = await runtime.getEntityById(message.roomId)\n    //console.log('roomEntity', roomEntity)\n\n    const agentEntityId = createUniqueUuid(runtime, runtime.agentId);\n    const agentEntity = await runtime.getEntityById(agentEntityId);\n    //console.log('agentEntity', agentEntity)\n    let spartanData = agentEntity.components.find(c => c.type === SPARTAN_SERVICE_TYPE)\n    console.log('spartanData', spartanData)\n    let spartanDataNew = false\n    let spartanDataDelta = false\n    if (!spartanData) {\n      // initialize\n      spartanDataNew = true\n      spartanDataDelta = true\n      spartanData = {\n        users: [],\n      }\n    }\n\n\n    // using the service to get this/components might be good way\n    const entityId = createUniqueUuid(runtime, message.metadata.authorId);\n    /*\n    const entity = await runtime.getEntityById(entityId)\n    console.log('entity', entity)\n    const email = entity.components.find(c => c.type === EMAIL_TYPE)\n    console.log('email', email)\n    */\n\n\n    console.log('would have responded', responses)\n    return\n\n    // update spartanData\n    async function updateSpartanData(agentEntityId, spartanData) {\n      if (spartanDataNew) {\n        await runtime.createComponent({\n          id: uuidv4() as UUID,\n          agentId: runtime.agentId,\n          worldId: roomDetails.worldId,\n          roomId: message.roomId,\n          sourceEntityId: entityId,\n          entityId: agentEntityId,\n          type: SPARTAN_SERVICE_TYPE,\n          data: spartanData,\n        });\n      } else {\n        await runtime.updateComponent({\n          id: spartanData.id,\n          // do we need all these fields?\n          //agentId: runtime.agentId,\n          //worldId: roomDetails.worldId,\n          //roomId: message.roomId,\n          //sourceEntityId: entityId,\n          //entityId: entityId,\n          //type: SPARTAN_SERVICE_TYPE,\n          data: agentEntity.components,\n        });\n      }\n    }\n    // if we need to update it\n    if (spartanDataDelta) {\n      updateSpartanData(agentEntityId, spartanData)\n    }\n\n    takeItPrivate(runtime, message, 'What you want me to fix boss')\n    responses.length = 0 // just clear them all\n  },\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'please run dev fix',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: \"I'll fix your data\",\n          actions: ['DEV_FIX'],\n        },\n      },\n    ],\n  ] as ActionExample[][],\n}","import type { Plugin } from \"@elizaos/core\";\n\n// actions\nimport { userRegistration }  from \"./actions/act_reg_start\";\nimport { checkRegistration } from \"./actions/act_reg_query\";\nimport { checkRegistrationCode } from \"./actions/act_reg_confirmemail\";\nimport { deleteRegistration } from \"./actions/act_reg_delete\";\nimport { servicesMenu } from \"./actions/act_menu\";\nimport { walletCreate } from \"./actions/act_wallet_create\";\nimport { setStrategy } from \"./actions/act_wallet_setstrategy\";\nimport { userMetawalletList } from \"./actions/act_wallet_list\";\nimport { devFix } from \"./actions/devfix\";\n\nexport const appPlugin: Plugin = {\n    name: \"AppDev\",\n    description: \"application development framework for ElizaOS\",\n    actions: [\n      userRegistration, checkRegistrationCode, checkRegistration, deleteRegistration,\n      servicesMenu, walletCreate, setStrategy, userMetawalletList, devFix\n    ],\n    evaluators: [],\n    providers: [],\n};\n\nexport default appPlugin;\n"],"mappings":";AAAA;AAAA,EACE,oBAAAA;AAAA,OAEK;;;ACFP,IAAM,YAAY,CAAC;AACnB,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC1B,YAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AACpD;AACO,SAAS,gBAAgB,KAAK,SAAS,GAAG;AAC7C,UAAQ,UAAU,IAAI,SAAS,CAAC,CAAC,IAC7B,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,GAAG,YAAY;AACjD;;;AC1BA,SAAS,sBAAsB;AAC/B,IAAM,YAAY,IAAI,WAAW,GAAG;AACpC,IAAI,UAAU,UAAU;AACT,SAAR,MAAuB;AAC1B,MAAI,UAAU,UAAU,SAAS,IAAI;AACjC,mBAAe,SAAS;AACxB,cAAU;AAAA,EACd;AACA,SAAO,UAAU,MAAM,SAAU,WAAW,EAAG;AACnD;;;ACTA,SAAS,kBAAkB;AAC3B,IAAO,iBAAQ,EAAE,WAAW;;;ACE5B,SAAS,GAAG,SAAS,KAAK,QAAQ;AAC9B,MAAI,eAAO,cAAc,CAAC,OAAO,CAAC,SAAS;AACvC,WAAO,eAAO,WAAW;AAAA,EAC7B;AACA,YAAU,WAAW,CAAC;AACtB,QAAM,OAAO,QAAQ,WAAW,QAAQ,OAAO,KAAK;AACpD,OAAK,CAAC,IAAK,KAAK,CAAC,IAAI,KAAQ;AAC7B,OAAK,CAAC,IAAK,KAAK,CAAC,IAAI,KAAQ;AAC7B,MAAI,KAAK;AACL,aAAS,UAAU;AACnB,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACzB,UAAI,SAAS,CAAC,IAAI,KAAK,CAAC;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AACA,SAAO,gBAAgB,IAAI;AAC/B;AACA,IAAO,aAAQ;;;AJff,OAAO,gBAAgB;;;AKLvB;AAAA,EACE;AAAA,EACA;AAAA,OACK;AAEP,eAAsB,aAAa,SAAS,SAAS,OAAO,WAAW;AACrE,QAAM,cAAc,MAAM,QAAQ,QAAQ,QAAQ,MAAM;AACxD,MAAI,QAAQ,QAAQ,WAAW,WAAW;AAExC,UAAM,iBAAiB,QAAQ,WAAW,SAAS;AACnD,QAAI,CAAC,gBAAgB;AACnB,aAAO,KAAK,oBAAoB;AAChC;AAAA,IACF;AACA,UAAM,OAAO,YAAY,SAAS;AAClC,QAAI,MAAM;AACR,qBAAe,OAAO,QAAQ,SAAS,UAAU,KAAK;AACtD,gBAAU,SAAS;AAAA,IACrB,OAAO;AACL,gBAAU,SAAS;AACnB,YAAM,WAAW,iBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,gBAAU,KAAK;AAAA,QACb;AAAA,QACA,SAAS,QAAQ;AAAA,QACjB,QAAQ,QAAQ;AAAA,QAChB,SAAS;AAAA,UACP,MAAM;AAAA,UACN,aAAa,CAAC;AAAA,UACd,WAAW,iBAAiB,SAAS,QAAQ,EAAE;AAAA,QACjD;AAAA;AAAA;AAAA,MAGF,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AACA,SAAO,KAAK,oBAAoB,QAAQ,QAAQ,MAAM;AACtD,SAAO;AACT;AAEO,SAAS,cAAc,SAAS,SAAS,OAAO;AACrD,MAAI,QAAQ,QAAQ,WAAW,WAAW;AAExC,UAAM,iBAAiB,QAAQ,WAAW,SAAS;AACnD,QAAI,CAAC,gBAAgB;AACnB,aAAO,KAAK,oBAAoB;AAChC;AAAA,IACF;AACA,mBAAe,OAAO,QAAQ,SAAS,UAAU,KAAK;AACtD,WAAO;AAAA,EACT;AACA,SAAO,KAAK,oBAAoB,QAAQ,QAAQ,MAAM;AACtD,SAAO;AACT;;;ACpDO,IAAM,aAAa;AACnB,IAAM,uBAAuB;;;ANQpC,IAAM,cAAc,WAAW,gBAAgB;AAAA,EAC7C,MAAM,QAAQ,IAAI;AAAA;AAAA,EAClB,MAAM,SAAS,QAAQ,IAAI,SAAS,KAAK;AAAA;AAAA,EACzC,QAAQ;AAAA;AAAA,EACR,MAAM;AAAA,IACJ,MAAM,QAAQ,IAAI;AAAA;AAAA,IAClB,MAAM,QAAQ,IAAI;AAAA;AAAA,EACpB;AACF,CAAC;AAED,SAAS,qBAAqB,QAAQ;AACpC,QAAM,QAAQ;AACd,MAAI,SAAS;AACb,QAAM,cAAc,MAAM;AAE1B,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,cAAU,MAAM,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,WAAW,CAAC;AAAA,EAChE;AAEA,SAAO;AACT;AAEA,SAAS,cAAc,MAAM;AAC3B,QAAM,aAAa;AACnB,QAAM,UAAU,KAAK,MAAM,UAAU;AACrC,SAAO,WAAW,CAAC;AACrB;AAEA,eAAe,gBAAgB,SAAS,SAAS;AAC/C,UAAQ,IAAI,2BAA2B,OAAO;AAC9C,QAAM,cAAc;AAAA,IAClB,MAAM,QAAQ,IAAI;AAAA,IAClB,IAAI;AAAA,IACJ,SAAS;AAAA;AAAA,IAET,MAAM,6CAA6C;AAAA,EACrD;AACA,MAAI;AACF,UAAM,OAAO,MAAM,YAAY,SAAS,WAAW;AACnD,YAAQ,IAAI,eAAe,KAAK,QAAQ;AAAA,EAC1C,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAAA,EAC7C;AACF;AAGO,IAAM,mBAA2B;AAAA,EACtC,MAAM;AAAA,EACN,SAAS,CACT;AAAA,EACA,UAAU,OAAO,SAAwB,YAAoB;AA4B3D,QAAI,CAAC,QAAQ,SAAS,SAAU,QAAO;AAGvC,UAAM,WAAWC,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AAEnD,UAAM,QAAQ,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAC/D,YAAQ,IAAI,uCAAuC,CAAC,CAAC,KAAK;AAC1D,WAAO,CAAC;AAAA,EACV;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACP,SACA,SACA,OACA,UACA,UACA,cACqB;AACrB,YAAQ,IAAI,2BAA2B;AAMvC,UAAM,cAAc,MAAM,QAAQ,QAAQ,QAAQ,MAAM;AAExD,YAAQ,IAAI,eAAe,WAAW;AACtC,UAAM,aAAa,MAAM,QAAQ,cAAc,QAAQ,MAAM;AAC7D,YAAQ,IAAI,cAAc,UAAU;AAEpC,UAAM,gBAAgBA,kBAAiB,SAAS,QAAQ,OAAO;AAC/D,UAAM,cAAc,MAAM,QAAQ,cAAc,aAAa;AAC7D,YAAQ,IAAI,eAAe,WAAW;AACtC,QAAI,cAAc,YAAY,WAAW,KAAK,OAAK,EAAE,SAAS,oBAAoB;AAClF,QAAI,iBAAiB;AACrB,QAAI,mBAAmB;AACvB,QAAI,CAAC,aAAa;AAEhB,uBAAiB;AACjB,kBAAY,OAAO;AAAA,QACjB,OAAO,CAAC;AAAA,MACV;AAAA,IACF;AAIA,UAAM,WAAWA,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AACnD,YAAQ,IAAI,UAAU,MAAM;AAC5B,UAAM,QAAQ,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAC/D,YAAQ,IAAI,SAAS,KAAK;AAE1B,UAAM,SAAS,cAAc,QAAQ,QAAQ,IAAI;AAEjD,YAAQ,IAAI,wBAAwB,SAAS;AAC7C,YAAQ,IAAI,qBAAqB,OAAO,MAAM;AAC9C,QAAI,OAAO,SAAS,GAAG;AACrB,UAAI,OAAO;AAET,gBAAQ,IAAI,eAAe;AAAA,MAC7B,OAAO;AACL,sBAAc,SAAS,SAAS,2DAA2D;AAC3F,kBAAU,SAAS;AAAA,MACrB;AAAA,IACF,WACI,OAAO,WAAW,GAAG;AACvB,YAAM,YAAY,YAAY,MAAM,SAAS,MAAM,CAAC,CAAC;AAErD,UAAI,WAAW;AACb,gBAAQ,IAAI,yCAAyC,SAAS;AAAA,MAChE,OAAO;AACL,cAAM,UAAU,qBAAqB,EAAE;AACvC,gBAAQ,IAAI,WAAW,SAAS,YAAY,OAAO,CAAC,CAAC;AAErD,cAAM,QAAQ,gBAAgB;AAAA,UAC5B,IAAI,WAAO;AAAA,UACX,SAAS,QAAQ;AAAA,UACjB,SAAS,YAAY;AAAA,UACrB,QAAQ,QAAQ;AAAA,UAChB,gBAAgB,QAAQ;AAAA,UACxB;AAAA,UACA,MAAM;AAAA,UACN,MAAM;AAAA,YACJ,SAAS,OAAO,CAAC;AAAA,YACjB,MAAM;AAAA,YACN,UAAU;AAAA,UACZ;AAAA,QACF,CAAC;AACD,2BAAmB;AACnB,oBAAY,KAAK,MAAM,KAAK,QAAQ;AACpC,cAAM,gBAAgB,OAAO,CAAC,GAAG,OAAO;AACxC,sBAAc,SAAS,SAAS,gFAAgF,OAAO,CAAC,CAAC;AACzH,kBAAU,SAAS;AAAA,MACrB;AAEA,qBAAe,kBAAkBC,gBAAeC,cAAa;AAC3D,YAAI,gBAAgB;AAClB,gBAAM,QAAQ,gBAAgB;AAAA,YAC5B,IAAI,WAAO;AAAA,YACX,SAAS,QAAQ;AAAA,YACjB,SAAS,YAAY;AAAA,YACrB,QAAQ,QAAQ;AAAA,YAChB,gBAAgB;AAAA,YAChB,UAAUD;AAAA,YACV,MAAM;AAAA,YACN,MAAMC,aAAY;AAAA,UACpB,CAAC;AAAA,QACH,OAAO;AACL,gBAAM,QAAQ,gBAAgB;AAAA,YAC5B,IAAIA,aAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQhB,MAAMA,aAAY;AAAA,UACpB,CAAC;AAAA,QACH;AAAA,MACF;AAEA,UAAI,kBAAkB;AACpB,0BAAkB,eAAe,WAAW;AAAA,MAC9C;AAAA,IACF,OAAO;AAML,UAAI,OAAO;AAMT,sBAAc,SAAS,SAAS,wBAAwB,QAAQ,oBAAoB;AACpF,kBAAU,SAAS;AAAA,MACrB,OAAO;AAiBL,sBAAc,SAAS,SAAS,2DAA2D;AAC3F,kBAAU,SAAS;AAAA,MACrB;AAAA,IACF;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,mBAAmB;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,mBAAmB;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,mBAAmB;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS,CAAC,QAAQ;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IAAG;AAAA,MACD;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,mBAAmB;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AOrUA;AAAA,EAKE,oBAAAC;AAAA,OAEK;AAIA,IAAM,oBAA4B;AAAA,EACvC,MAAM;AAAA,EACN,SAAS,CACT;AAAA;AAAA,EAEA,UAAU,OAAO,SAAwB,YAAoB;AAE3D,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACP,SACA,SACA,OACA,UACA,UACA,cACqB;AACrB,YAAQ,IAAI,4BAA4B;AAExC,UAAM,WAAWC,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AAEnD,UAAM,QAAQ,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAC/D,YAAQ,IAAI,sBAAsB,OAAO,+BAAO,KAAK,QAAQ;AAC7D,QAAI,OAAO;AAET,UAAI,MAAM,KAAK,UAAU;AACvB,sBAAc,SAAS,SAAS,6BAA6B,MAAM,KAAK,OAAO;AAAA,MACjF,OAAO;AACL,sBAAc,SAAS,SAAS,6BAA6B,MAAM,KAAK,UAAU,0BAA0B;AAAA,MAC9G;AAAA,IACF,OAAO;AACL,oBAAc,SAAS,SAAS,uBAAuB;AAAA,IACzD;AACA,cAAU,SAAS;AAAA,EACrB;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,oBAAoB;AAAA,QAChC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,oBAAoB;AAAA,QAChC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS,CAAC,QAAQ;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS,CAAC,QAAQ;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC5GA;AAAA,EAKE,oBAAAC;AAAA,OAEK;AAIP,SAAS,kBAAkB,SAAS,QAAQ;AAC1C,QAAM,UAAU,IAAI,OAAO,kBAAkB,MAAM,MAAM;AACzD,QAAM,QAAQ,QAAQ,MAAM,OAAO;AACnC,SAAO,QAAQ,MAAM,CAAC,IAAI;AAC5B;AAEO,IAAM,wBAAgC;AAAA,EAC3C,MAAM;AAAA,EACN,SAAS,CACT;AAAA;AAAA,EAEA,UAAU,OAAO,SAAwB,YAAoB;AAtB/D;AA0BI,QAAI,CAAC,QAAQ,SAAS,SAAU,QAAO;AAGvC,UAAM,WAAWC,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AACnD,UAAM,QAAQ,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAC/D,UAAM,wBAAwB,kBAAkB,QAAQ,QAAQ,MAAM,EAAE;AACxE,QAAI,0BAA0B,MAAM;AAClC,cAAQ,cAAc,IAAI,kDAAkD,OAAO,uBAAwB,qBAAqB;AAAA,IAClI;AACA,WAAO,SAAS,0BAA0B,QAAQ,GAAC,WAAM,SAAN,mBAAY;AAAA,EACjE;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACP,SACA,SACA,OACA,UACA,UACA,cACqB;AACrB,YAAQ,IAAI,kCAAkC;AAG9C,UAAM,cAAc,MAAM,QAAQ,QAAQ,QAAQ,MAAM;AAExD,UAAM,WAAWA,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AACnD,YAAQ,IAAI,mCAAmC,MAAM;AACrD,UAAM,QAAQ,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAC/D,QAAI,CAAC,OAAO;AACV,cAAQ,IAAI,kBAAkB;AAC9B;AAAA,IACF;AACA,UAAM,aAAa,kBAAkB,QAAQ,QAAQ,MAAM,EAAE;AAC7D,QAAI,eAAe,MAAM;AACvB,cAAQ,IAAI,kBAAkB;AAC9B;AAAA,IACF;AACA,YAAQ,IAAI,kCAAkC,OAAO,QAAQ,UAAU;AACvE,QAAI,MAAM,KAAK,UAAU,OAAW,OAAM,KAAK,QAAQ;AACvD,QAAI,MAAM,KAAK,QAAQ,GAAG;AACxB,cAAQ,IAAI,WAAW;AACvB,oBAAc,SAAS,SAAS,2EAA2E;AAC3G,gBAAU,SAAS;AACnB;AAAA,IACF;AACA,QAAI,eAAe,MAAM,KAAK,MAAM;AAElC,YAAM,KAAK,WAAW;AACtB,oBAAc,SAAS,SAAS,mEAAmE;AAAA,IACrG,OAAO;AAGL,YAAM,KAAK;AACX,oBAAc,SAAS,SAAS,2EAA2E;AAAA,IAC7G;AACA,cAAU,SAAS;AACnB,UAAM,QAAQ,gBAAgB;AAAA,MAC5B,IAAI,MAAM;AAAA,MACV,SAAS,YAAY;AAAA,MACrB,QAAQ,QAAQ;AAAA,MAChB,gBAAgB,QAAQ;AAAA,MACxB;AAAA,MACA,MAAM;AAAA,MACN,MAAM,MAAM;AAAA,MACZ,SAAS,QAAQ;AAAA,IACnB,CAAC;AAAA,EACH;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,0BAA0B;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS,CAAC,QAAQ;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EAEF;AACF;;;AC7IA;AAAA,EACE,oBAAAC;AAAA,OAEK;AAIA,IAAM,qBAA6B;AAAA,EACxC,MAAM;AAAA,EACN,SAAS,CACT;AAAA;AAAA,EAEA,UAAU,OAAO,SAAwB,YAAoB;AAI3D,QAAI,CAAC,QAAQ,SAAS,SAAU,QAAO;AAGvC,UAAM,WAAWC,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AACnD,UAAM,QAAQ,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAC/D,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACP,SACA,SACA,OACA,UACA,UACA,cACqB;AACrB,YAAQ,IAAI,6BAA6B;AAGzC,UAAM,cAAc,MAAM,QAAQ,QAAQ,QAAQ,MAAM;AAExD,UAAM,WAAWA,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AAEpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AACnD,YAAQ,IAAI,UAAU,MAAM;AAC5B,UAAM,oBAAoB,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAW3E,QAAI,mBAAmB;AACrB,cAAQ,IAAI,YAAY,iBAAiB;AACzC,oBAAc,SAAS,SAAS,qCAAqC,kBAAkB,KAAK,OAAO;AACnG,cAAQ,gBAAgB,kBAAkB,EAAE;AAAA,IAC9C,OAAO;AACL,oBAAc,SAAS,SAAS,6BAA6B;AAAA,IAC/D;AACA,cAAU,SAAS;AAAA,EACrB;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,qBAAqB;AAAA,QACjC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS,CAAC,QAAQ;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IAAG;AAAA,MACD;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,qBAAqB;AAAA,QACjC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC1HA;AAAA,EACE,oBAAAC;AAAA,OAEK;AAKP,IAAM,WAAW;AAEV,IAAM,eAAuB;AAAA,EAClC,MAAM;AAAA,EACN,SAAS,CACT;AAAA,EACA,UAAU,OAAO,SAAwB,YAAoB;AAE3D,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACP,SACA,SACA,OACA,UACA,UACA,cACqB;AACrB,YAAQ,IAAI,uBAAuB;AAgCnC,UAAM,WAAWC,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AAEnD,UAAM,WAAW,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAElE,UAAM,aAAa,SAAS,SAAS,4DAA4D,SAAS;AAAA,EAC5G;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,eAAe;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,eAAe;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,eAAe;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC/HA;AAAA,EACE,oBAAAC;AAAA,OAEK;AAMA,IAAM,eAAuB;AAAA,EAClC,MAAM;AAAA,EACN,SAAS,CACT;AAAA,EACA,UAAU,OAAO,SAAwB,YAAoB;AAuC3D,UAAM,qBAAqB,QAAQ,WAAW,iBAAiB;AAC/D,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACP,SACA,SACA,OACA,UACA,UACA,cACqB;AACrB,YAAQ,IAAI,yBAAyB;AAarC,UAAM,WAAWC,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AAEnD,UAAM,QAAQ,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAG/D,QAAI,CAAC,OAAO;AACV,cAAQ,cAAc,IAAI,gBAAgB;AAE1C,mBAAa,SAAS,SAAS,6CAA6C,SAAS;AACrF,gBAAU,SAAS;AACnB;AAAA,IACF;AAEA,UAAM,qBAAqB,QAAQ,WAAW,iBAAiB;AAC/D,UAAM,gBAAgB,MAAM,mBAAmB,qBAAqB;AACpE,YAAQ,IAAI,iBAAiB,aAAa;AAC1C,kBAAc,SAAS,SAAS,wEAAwE,cAAc,KAAK,KAAK,IAAI,IAAI;AACxI,cAAU,SAAS;AAAA,EACrB;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,iBAAiB;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,iBAAiB;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,iBAAiB;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS,CAAC,QAAQ;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IAAG;AAAA,MACD;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,iBAAiB;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC5KA;AAAA,EACE,oBAAAC;AAAA,OAEK;AAMA,IAAM,cAAsB;AAAA,EACjC,MAAM;AAAA,EACN,SAAS,CACT;AAAA,EACA,UAAU,OAAO,SAAwB,YAAoB;AAb/D;AAcI,YAAQ,IAAI,6BAA4B,wCAAS,aAAT,mBAAmB,QAAQ;AACnE,QAAI,GAAC,wCAAS,aAAT,mBAAmB,WAAU;AAChC,cAAQ,IAAI,6CAA6C;AACzD,aAAO;AAAA,IACT;AAEA,UAAM,WAAWC,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,QAAI,aAAa,KAAM,QAAO;AAC9B,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AAEnD,UAAM,MAAM,CAAC,CAAC,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAC/D,QAAI,CAAC,IAAK,QAAO;AAEjB,UAAM,qBAAqB,QAAQ,WAAW,cAAc;AAC5D,QAAI,CAAC,mBAAoB,QAAO;AAChC,UAAM,wBAAwB,QAAQ,WAAW,iBAAiB;AAClE,QAAI,CAAC,sBAAuB,QAAO;AACnC,UAAM,gBAAgB,MAAM,sBAAsB,qBAAqB;AAEvE,UAAM,gBAAgB,cAAc,KAAK,UAAQ,QAAQ,QAAQ,KAAK,SAAS,IAAI,CAAC;AACpF,YAAQ,IAAI,iBAAiB,eAAe,QAAQ,QAAQ,IAAI;AAChE,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACP,SACA,SACA,OACA,UACA,UACA,cACqB;AACrB,YAAQ,IAAI,yBAAyB;AAGrC,UAAM,WAAWA,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AAEnD,UAAM,QAAQ,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAI/D,QAAI,CAAC,OAAO;AACV,cAAQ,cAAc,IAAI,gBAAgB;AAC1C;AAAA,IACF;AACA,UAAM,cAAc,MAAM,QAAQ,QAAQ,QAAQ,MAAM;AAExD,UAAM,wBAAwB,QAAQ,WAAW,iBAAiB;AAClE,UAAM,gBAAgB,MAAM,sBAAsB,qBAAqB;AAEvE,UAAM,iBAAiB,cAAc,OAAO,UAAQ,QAAQ,QAAQ,KAAK,SAAS,IAAI,CAAC;AACvF,YAAQ,IAAI,kBAAkB,cAAc;AAU5C,UAAM,qBAAqB,QAAQ,WAAW,cAAc;AAC5D,UAAM,SAAS,MAAM,mBAAmB,iBAAiB;AACzD,YAAQ,IAAI,UAAU,MAAM;AAE5B,UAAM,UAAU,MAAM;AACtB,QAAI,QAAQ,gBAAgB,OAAW,SAAQ,cAAc,CAAC;AAC9D,UAAM,YAAY;AAAA,MAChB,UAAU,eAAe,CAAC;AAAA,IAC5B;AACA,UAAM,WAAW,CAAC;AAClB,eAAU,KAAK,QAAQ;AACrB,cAAQ,IAAI,SAAS,CAAC;AACtB,YAAM,KAAK,MAAM,mBAAmB,YAAY,CAAC;AACjD,cAAQ,IAAI,MAAM,EAAE;AACpB,eAAS,CAAC,IAAI;AAAA,IAChB;AACA,cAAU,WAAW;AACrB,YAAQ,IAAI,aAAa,SAAS;AAClC,kBAAc,SAAS,SAAS,wBAAwB,KAAK,UAAU,SAAS,IAAI,kCAAkC;AAEtH,YAAQ,YAAY,KAAK,SAAS;AAElC,YAAQ,cAAc,CAAC,SAAS;AAEhC,UAAM,QAAQ,gBAAgB;AAAA,MAC5B,IAAI,MAAM;AAAA,MACV,SAAS,YAAY;AAAA,MACrB,QAAQ,QAAQ;AAAA,MAChB,gBAAgB,QAAQ;AAAA,MACxB;AAAA,MACA,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS,QAAQ;AAAA,IACnB,CAAC;AAGD,cAAU,SAAS;AAAA,EACrB;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,iBAAiB;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,iBAAiB;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,iBAAiB;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,SAAS,CAAC,QAAQ;AAAA,QACpB;AAAA,MACF;AAAA,IACF;AAAA,IAAG;AAAA,MACD;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,iBAAiB;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC7LA;AAAA,EACE,oBAAAC;AAAA,OAEK;AAMA,IAAM,qBAA6B;AAAA,EACxC,MAAM;AAAA,EACN,SAAS,CACT;AAAA,EACA,UAAU,OAAO,SAAwB,YAAoB;AAb/D;AAcI,YAAQ,IAAI,kCAAiC,wCAAS,aAAT,mBAAmB,QAAQ;AACxE,QAAI,GAAC,wCAAS,aAAT,mBAAmB,WAAU;AAChC,cAAQ,IAAI,kDAAkD;AAC9D,aAAO;AAAA,IACT;AAEA,UAAM,WAAWC,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,QAAI,aAAa,KAAM,QAAO;AAC9B,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AAEnD,UAAM,MAAM,CAAC,CAAC,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAC/D,QAAI,CAAC,IAAK,QAAO;AAEjB,UAAM,qBAAqB,QAAQ,WAAW,cAAc;AAC5D,QAAI,CAAC,mBAAoB,QAAO;AAChC,UAAM,wBAAwB,QAAQ,WAAW,iBAAiB;AAClE,QAAI,CAAC,sBAAuB,QAAO;AACnC,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACP,SACA,SACA,OACA,UACA,UACA,cACqB;AACrB,YAAQ,IAAI,8BAA8B;AAG1C,UAAM,WAAWA,kBAAiB,SAAS,QAAQ,SAAS,QAAQ;AACpE,UAAM,SAAS,MAAM,QAAQ,cAAc,QAAQ;AAEnD,UAAM,QAAQ,OAAO,WAAW,KAAK,OAAK,EAAE,SAAS,UAAU;AAI/D,QAAI,CAAC,OAAO;AACV,cAAQ,cAAc,IAAI,gBAAgB;AAC1C;AAAA,IACF;AACA,UAAM,cAAc,MAAM,QAAQ,QAAQ,QAAQ,MAAM;AAExD,UAAM,wBAAwB,QAAQ,WAAW,iBAAiB;AAClE,UAAM,gBAAgB,MAAM,sBAAsB,qBAAqB;AAEvE,UAAM,iBAAiB,cAAc,OAAO,UAAQ,QAAQ,QAAQ,KAAK,SAAS,IAAI,CAAC;AACvF,YAAQ,IAAI,kBAAkB,cAAc;AAU5C,UAAM,qBAAqB,QAAQ,WAAW,cAAc;AAC5D,UAAM,SAAS,MAAM,mBAAmB,iBAAiB;AACzD,YAAQ,IAAI,UAAU,MAAM;AAI5B,kBAAc,SAAS,SAAS,mBAAmB,KAAK,UAAU,MAAM,KAAK,WAAW,CAAC;AACzF,cAAU,SAAS;AAAA,EACrB;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,sBAAsB;AAAA,QAClC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,sBAAsB;AAAA,QAClC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC/HA;AAAA,EACE,oBAAAC;AAAA,OAEK;AAMA,IAAM,SAAiB;AAAA,EAC5B,MAAM;AAAA,EACN,SAAS,CACT;AAAA,EACA,UAAU,OAAO,SAAwB,YAAoB;AAC3D,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACP,SACA,SACA,OACA,UACA,UACA,cACqB;AACrB,YAAQ,IAAI,iBAAiB;AAM7B,UAAM,cAAc,MAAM,QAAQ,QAAQ,QAAQ,MAAM;AAGxD,UAAM,aAAa,MAAM,QAAQ,cAAc,QAAQ,MAAM;AAG7D,UAAM,gBAAgBC,mBAAiB,SAAS,QAAQ,OAAO;AAC/D,UAAM,cAAc,MAAM,QAAQ,cAAc,aAAa;AAE7D,QAAI,cAAc,YAAY,WAAW,KAAK,OAAK,EAAE,SAAS,oBAAoB;AAClF,YAAQ,IAAI,eAAe,WAAW;AACtC,QAAI,iBAAiB;AACrB,QAAI,mBAAmB;AACvB,QAAI,CAAC,aAAa;AAEhB,uBAAiB;AACjB,yBAAmB;AACnB,oBAAc;AAAA,QACZ,OAAO,CAAC;AAAA,MACV;AAAA,IACF;AAIA,UAAM,WAAWA,mBAAiB,SAAS,QAAQ,SAAS,QAAQ;AASpE,YAAQ,IAAI,wBAAwB,SAAS;AAC7C;AAGA,mBAAe,kBAAkBC,gBAAeC,cAAa;AAC3D,UAAI,gBAAgB;AAClB,cAAM,QAAQ,gBAAgB;AAAA,UAC5B,IAAI,WAAO;AAAA,UACX,SAAS,QAAQ;AAAA,UACjB,SAAS,YAAY;AAAA,UACrB,QAAQ,QAAQ;AAAA,UAChB,gBAAgB;AAAA,UAChB,UAAUD;AAAA,UACV,MAAM;AAAA,UACN,MAAMC;AAAA,QACR,CAAC;AAAA,MACH,OAAO;AACL,cAAM,QAAQ,gBAAgB;AAAA,UAC5B,IAAIA,aAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQhB,MAAM,YAAY;AAAA,QACpB,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,kBAAkB;AACpB,wBAAkB,eAAe,WAAW;AAAA,IAC9C;AAEA,kBAAc,SAAS,SAAS,8BAA8B;AAC9D,cAAU,SAAS;AAAA,EACrB;AAAA,EACA,UAAU;AAAA,IACR;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS,CAAC,SAAS;AAAA,QACrB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC1GO,IAAM,YAAoB;AAAA,EAC7B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS;AAAA,IACP;AAAA,IAAkB;AAAA,IAAuB;AAAA,IAAmB;AAAA,IAC5D;AAAA,IAAc;AAAA,IAAc;AAAA,IAAa;AAAA,IAAoB;AAAA,EAC/D;AAAA,EACA,YAAY,CAAC;AAAA,EACb,WAAW,CAAC;AAChB;AAEA,IAAO,gBAAQ;","names":["createUniqueUuid","createUniqueUuid","agentEntityId","spartanData","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","createUniqueUuid","agentEntityId","spartanData"]}