---
description: 
globs: src/app/**/*,src/components/**/*
alwaysApply: false
---
# Frontend Development Standards

## Component Organization

- **Page-Specific Components:**
  - Place in `src/app/<page>` directory related to the feature
  - These components should contain business logic
  - Example locations:
    ```typescript
    // ✅ DO: Place page-specific components in the related page directory
    src/app/profile/[username]/user-stats.tsx
    src/app/leaderboard/leaderboard-filters.tsx
    
    // ❌ DON'T: Mix business logic components with pure UI components
    src/components/profile-stats.tsx  // Should be in src/app/profile/
    ```

- **Shared UI Components:**
  - Place in `src/components` directory
  - These should be pure UI/layout components without business logic
  - Example locations:
    ```typescript
    // ✅ DO: Place reusable UI components in src/components
    src/components/stat-card.tsx
    src/components/activity-item.tsx
    
    // ❌ DON'T: Place page-specific components here
    src/components/leaderboard-page-filters.tsx  // Should be in src/app/leaderboard/
    ```

- **Shadcn Components:**
  - All shadcn/ui base components should be placed in `src/components/ui`
  - Do not modify these files unless extending the component API
  - Example: 
    ```typescript
    // ✅ DO: Keep shadcn components in the ui directory
    src/components/ui/button.tsx
    src/components/ui/card.tsx
    ```

## Component Structure

- **One Component Per File:**
  - Each file should export exactly one main component
  - Use names exports for components
  - Exception: compound components can be in the same file
  - Example:
    ```typescript
    // ✅ DO: One main component per file with default export
    export function StatCard({ title, value, icon }: StatCardProps) {
      // Implementation
    }
    
    // ✅ DO: Compound components can share a file
    function Tabs({ children, ...props }: TabsProps) {
      // Implementation
    }
    
    function TabsList({ children }: TabsListProps) {
      // Implementation
    }
    
    // Export as a namespace
    export { Tabs, TabsList, TabsContent, TabsTrigger }
    ```

## CSS and Styling

- **Tailwind Classes:**
  - Use Tailwind's utility classes for styling
  - Group related classes together


## Data Fetching and State Management

- **Data Fetching:**
  - Use React Server Components where possible
  - Place data fetching logic in dedicated files (e.g., `queries.ts`)
  - Example:
    ```typescript
    // ✅ DO: Separate data fetching logic in queries.ts
    // src/app/profile/[username]/queries.ts
    export async function getUserProfile(username: string) {
      // Implementation
    }
    
    // src/app/profile/[username]/page.tsx
    import { getUserProfile } from "./queries";
    
    export default async function ProfilePage({ params }: { params: { username: string } }) {
      const userData = await getUserProfile(params.username);
      // Render component with data
    }
    ```

- **State Management:**
  - **Prefer URL Query Parameters Over useState:**
    - Store UI state in URL when possible using Next.js router and searchParams
    - Makes state shareable, bookmarkable, and persists through refreshes
    - Example:
    ```typescript
    // ✅ DO: Use URL query params for UI state
    // src/app/leaderboard/page.tsx
    export default function LeaderboardPage({ 
      searchParams 
    }: { 
      searchParams: { period?: string; category?: string } 
    }) {
      const period = searchParams.period || 'week';
      const category = searchParams.category || 'all';

      return (
        <div>
          <LeaderboardFilters 
            period={period} 
            category={category} 
          />
          <LeaderboardResults 
            period={period} 
            category={category} 
          />
        </div>
      );
    }

    // src/app/leaderboard/filters.tsx
    import { useRouter, usePathname } from 'next/navigation';

    export function LeaderboardFilters({ period, category }: FilterProps) {
      const router = useRouter();
      const pathname = usePathname();

      const updateFilter = (key: string, value: string) => {
        const params = new URLSearchParams();
        params.set(key, value);
        if (key !== 'period') params.set('period', period);
        if (key !== 'category') params.set('category', category);
        router.push(`${pathname}?${params.toString()}`);
      };

      return (
        // Filter UI with onClick handlers that call updateFilter
      );
    }
    ```

    ```typescript
    // ❌ DON'T: Use local state for shareable UI state
    function LeaderboardPage() {
      const [period, setPeriod] = useState('week');
      const [category, setCategory] = useState('all');

      // This state is lost on page refresh and can't be shared via URL
      return (
        <div>
          <FilterControls 
            period={period} 
            category={category} 
            setPeriod={setPeriod} 
            setCategory={setCategory} 
          />
          <LeaderboardResults period={period} category={category} />
        </div>
      );
    }
    ```

  - **When to Use React useState:**
    - For ephemeral UI state that doesn't need to persist (tooltips, dropdowns)
    - For form input values before submission
    - When leveraging external libraries that require local state
    - When working with client components that can't use URL state

  - Extract complex state logic into custom hooks
  - Example:
    ```typescript
    // ✅ DO: Create custom hooks for complex state logic
    // src/app/leaderboard/use-leaderboard-filters.ts
    export function useLeaderboardFilters() {
      const router = useRouter();
      const pathname = usePathname();
      const searchParams = useSearchParams();
      
      const filters = {
        period: searchParams.get('period') || 'week',
        category: searchParams.get('category') || 'all'
      };
      
      const setFilter = useCallback((key: string, value: string) => {
        const params = new URLSearchParams(searchParams);
        params.set(key, value);
        router.push(`${pathname}?${params.toString()}`);
      }, [searchParams, router, pathname]);
      
      return { filters, setFilter };
    }
    ```

## Component Composition

- **Composition Over Props:**
  - Prefer component composition over complex prop configurations
  - Use children and render props patterns for flexibility
  - Example:
    ```tsx
    // ✅ DO: Use composition for flexible components
    <Card>
      <CardHeader>
        <CardTitle>User Statistics</CardTitle>
        <CardDescription>Performance metrics for the current period</CardDescription>
      </CardHeader>
      <CardContent>
        {/* Content */}
      </CardContent>
      <CardFooter>
        <Button>View Details</Button>
      </CardFooter>
    </Card>
    
    // ❌ DON'T: Create inflexible components with too many props
    <StatisticsCard 
      title="User Statistics"
      description="Performance metrics for the current period"
      metrics={userMetrics}
      showViewDetails={true}
      onViewDetails={handleViewDetails}
    />
    ```

## Performance Optimization

- **Component Memoization:**
  - Memoize expensive components with React.memo
  - Use useMemo/useCallback for expensive calculations or callbacks
  - Example:
    ```tsx
    // ✅ DO: Memoize expensive components
    const MemoizedDataTable = React.memo(DataTable);
    
    // ✅ DO: Use useMemo for expensive calculations
    const sortedData = useMemo(() => {
      return [...data].sort((a, b) => b.score - a.score);
    }, [data]);
    ```

## Error Handling and Loading States

- **React Suspense for Loading States:**
  - Use React Suspense for handling loading states
  - Implement suspense boundaries at the appropriate level of your component tree
  - Create well-designed loading components that match the structure of the content they replace
  - Example:
    ```tsx
    // ✅ DO: Use Suspense for loading states
    // src/app/profile/[username]/page.tsx
    import { Suspense } from 'react';
    import { UserStats, UserStatsLoading } from './user-stats';
    import { UserActivity, UserActivityLoading } from './user-activity';

    export default function ProfilePage({ params }: { params: { username: string } }) {
      return (
        <div className="space-y-6">
          <Suspense fallback={<UserStatsLoading />}>
            <UserStats username={params.username} />
          </Suspense>
          
          <Suspense fallback={<UserActivityLoading />}>
            <UserActivity username={params.username} />
          </Suspense>
        </div>
      );
    }
    ```

    ```tsx
    // Example loading component - skeleton should match the structure of the actual component
    export function UserStatsLoading() {
      return (
        <div className="space-y-3">
          <div className="h-8 w-1/3 rounded-md bg-muted animate-pulse" />
          <div className="grid grid-cols-3 gap-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="h-24 rounded-lg bg-muted animate-pulse" />
            ))}
          </div>
        </div>
      );
    }
    ```

- **Asynchronous Components:**
  - Leverage async/await in Server Components for data fetching
  - Manage loading state through Suspense rather than manual loading flags
  - Example:
    ```tsx
    // ✅ DO: Use async/await with Suspense
    // src/app/profile/[username]/user-stats.tsx
    import { getStats } from './queries';

    export async function UserStats({ username }: { username: string }) {
      // This will automatically trigger Suspense while resolving
      const stats = await getStats(username);
      
      return (
        <div className="grid grid-cols-3 gap-4">
          {stats.map(stat => (
            <StatCard 
              key={stat.id} 
              title={stat.name} 
              value={stat.value} 
              icon={stat.icon} 
            />
          ))}
        </div>
      );
    }
    ```

    ```tsx
    // ❌ DON'T: Manually manage loading states with useState
    function UserStats({ username }: { username: string }) {
      const [loading, setLoading] = useState(true);
      const [stats, setStats] = useState<Stats[]>([]);
      const [error, setError] = useState<Error | null>(null);
      
      useEffect(() => {
        async function fetchStats() {
          try {
            setLoading(true);
            const data = await getStats(username);
            setStats(data);
          } catch (err) {
            setError(err as Error);
          } finally {
            setLoading(false);
          }
        }
        fetchStats();
      }, [username]);
      
      if (loading) return <UserStatsLoading />;
      if (error) return <ErrorComponent error={error} />;
      
      return (
        // Render stats
      );
    }
    ```

- **Error Boundaries:**
  - Implement error boundaries for critical components
  - Use the `error.tsx` file in Next.js App Router for route-level error handling
  - Example:
    ```tsx
    // src/app/profile/[username]/error.tsx
    'use client';
    
    import { Button } from '@/components/ui/button';
    
    export default function ProfileError({
      error,
      reset,
    }: {
      error: Error & { digest?: string };
      reset: () => void;
    }) {
      return (
        <div className="rounded-lg border border-destructive/50 bg-destructive/10 p-6 text-destructive">
          <h2 className="text-lg font-medium">Something went wrong loading this profile</h2>
          <p className="mt-2 text-sm">{error.message}</p>
          <Button variant="outline" className="mt-4" onClick={reset}>
            Try again
          </Button>
        </div>
      );
    }
    ```

## Accessibility

- **Semantic HTML:**
  - Use appropriate semantic HTML elements
  - Implement proper heading hierarchy (h1, h2, h3)
  - Example:
    ```tsx
    // ✅ DO: Use semantic HTML
    <section aria-labelledby="profile-heading">
      <h2 id="profile-heading" className="text-2xl font-bold">User Profile</h2>
      <div role="list" className="mt-4 space-y-3">
        {stats.map(stat => (
          <div role="listitem" key={stat.id}>
            {/* Stat content */}
          </div>
        ))}
      </div>
    </section>
    ```

- **Focus Management:**
  - Ensure keyboard navigation works properly
  - Use proper focus indicators
  - Example:
    ```tsx
    // ✅ DO: Ensure proper focus management
    <button
      className="rounded-md bg-primary px-4 py-2 text-primary-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
      onClick={handleAction}
    >
      Action Button
    </button>
    ```
